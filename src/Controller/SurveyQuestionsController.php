<?php
namespace CakephpSurvey\Controller;

use CakephpSurvey\Controller\AppController;

/**
 * SurveyQuestions Controller
 *
 * @property \CakephpSurvey\Model\Table\SurveyQuestionsTable $SurveyQuestions
 */
class SurveyQuestionsController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $user = $this->Auth->user();
        if ($user['user_type'] == 'sys') {
            $this->Auth->allow();
        }
    }

    public $paginate = [
        'limit' => 15,
        'order' => [
            'SurveyQuestions.id' => 'desc'
        ]
    ];

    /**
     * Index method
     *
     * @return void
     */
    public function index()
    {
        $surveyQuestions = $this->SurveyQuestions->find('all');
        $this->set('surveyQuestions', $this->paginate($surveyQuestions));
        $this->set('_serialize', ['surveyQuestions']);
    }

    /**
     * View method
     *
     * @param string|null $id Survey Question id.
     * @return void
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function view($id = null)
    {
        $user = $this->Auth->user();
        $surveyQuestion = $this->SurveyQuestions->get($id, [
            'contain' => []
        ]);
        $this->set('surveyQuestion', $surveyQuestion);
        $this->set('_serialize', ['surveyQuestion']);
    }

    /**
     * Add method
     *
     * @return void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $user = $this->Auth->user();
        $time = time();
        $surveyQuestion = $this->SurveyQuestions->newEntity();
        if ($this->request->is('post')) {

            $data = $this->request->data;
            $data['create_by'] = $user['id'];
            $surveyQuestion = $this->SurveyQuestions->patchEntity($surveyQuestion, $data);
            if ($this->SurveyQuestions->save($surveyQuestion)) {
                $this->Flash->success('The survey question has been saved.');
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error('The survey question could not be saved. Please, try again.');
            }
        }
        $this->set(compact('surveyQuestion'));
        $this->set('_serialize', ['surveyQuestion']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Survey Question id.
     * @return void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $user = $this->Auth->user();
        $time = time();
        $surveyQuestion = $this->SurveyQuestions->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $data = $this->request->data;
            $data['update_by'] = $user['id'];
            $surveyQuestion = $this->SurveyQuestions->patchEntity($surveyQuestion, $data);
            if ($this->SurveyQuestions->save($surveyQuestion)) {
                $this->Flash->success('The survey question has been saved.');
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error('The survey question could not be saved. Please, try again.');
            }
        }
        $this->set(compact('surveyQuestion'));
        $this->set('_serialize', ['surveyQuestion']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Survey Question id.
     * @return void Redirects to index.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function delete($id = null)
    {

        $surveyQuestion = $this->SurveyQuestions->get($id);

        $user = $this->Auth->user();
        $data = $this->request->data;
        $data['updated_by'] = $user['id'];
        $data['status'] = 99;
        $surveyQuestion = $this->SurveyQuestions->patchEntity($surveyQuestion, $data);
        if ($this->SurveyQuestions->save($surveyQuestion)) {
            $this->Flash->success('The survey question has been deleted.');
        } else {
            $this->Flash->error('The survey question could not be deleted. Please, try again.');
        }
        return $this->redirect(['action' => 'index']);
    }
}
